ggplot() +
# blue
geom_point(data=pred_2, aes(x=fpr, y=tpr)) +
geom_line(data=pred_2, aes(x=fpr, y=tpr), colour="blue", size=1) +
# red
geom_point(data=pred_3, aes(x=fpr, y=tpr)) +
geom_line(data=pred_3, aes(x=fpr, y=tpr),colour="red", size=1)
# green
geom_point(data=pred_5, aes(x=fpr, y=tpr)) +
geom_line(data=pred_5, aes(x=fpr, y=tpr),colour="green", size=1)
# brown
geom_point(data=pred_10, aes(x=fpr, y=tpr)) +
geom_line(data=pred_10, aes(x=fpr, y=tpr),colour="brown", size=1)
# black
geom_point(data=random, aes(x, y)) +
geom_line(data=random, aes(x,y),colour="black", size=1)
ggplot() +
# blue
geom_point(data=pred_2, aes(x=fpr, y=tpr)) +
geom_line(data=pred_2, aes(x=fpr, y=tpr), colour="blue", size=1) +
# red
geom_point(data=pred_3, aes(x=fpr, y=tpr)) +
geom_line(data=pred_3, aes(x=fpr, y=tpr),colour="red", size=1)
ggplot() +
# blue
geom_point(data=pred_2, aes(x=fpr, y=tpr)) +
geom_line(data=pred_2, aes(x=fpr, y=tpr), colour="blue", size=1) +
# red
geom_point(data=pred_3, aes(x=fpr, y=tpr)) +
geom_line(data=pred_3, aes(x=fpr, y=tpr),colour="red", size=1)
ggplot() +
# blue
# geom_point(data=pred_2, aes(x=fpr, y=tpr)) +
# geom_line(data=pred_2, aes(x=fpr, y=tpr), colour="blue", size=1) +
# # red
# geom_point(data=pred_3, aes(x=fpr, y=tpr)) +
# geom_line(data=pred_3, aes(x=fpr, y=tpr),colour="red", size=1)
# # green
# geom_point(data=pred_5, aes(x=fpr, y=tpr)) +
# geom_line(data=pred_5, aes(x=fpr, y=tpr),colour="green", size=1)
# # brown
# geom_point(data=pred_10, aes(x=fpr, y=tpr)) +
# geom_line(data=pred_10, aes(x=fpr, y=tpr),colour="brown", size=1)
# # black
geom_point(data=random, aes(x, y)) +
geom_line(data=random, aes(x,y),colour="black", size=1)
ggplot() +
# # blue
# geom_point(data=pred_2, aes(x=fpr, y=tpr)) +
# geom_line(data=pred_2, aes(x=fpr, y=tpr), colour="blue", size=1) +
# # red
# geom_point(data=pred_3, aes(x=fpr, y=tpr)) +
# geom_line(data=pred_3, aes(x=fpr, y=tpr),colour="red", size=1)
# green
geom_point(data=pred_5, aes(x=fpr, y=tpr)) +
geom_line(data=pred_5, aes(x=fpr, y=tpr),colour="green", size=1)
ggplot() +
# blue
geom_point(data=pred_2, aes(x=fpr, y=tpr)) +
geom_line(data=pred_2, aes(x=fpr, y=tpr), colour="blue", size=1) +
# red
geom_point(data=pred_3, aes(x=fpr, y=tpr)) +
geom_line(data=pred_3, aes(x=fpr, y=tpr),colour="red", size=1)+
# green
geom_point(data=pred_5, aes(x=fpr, y=tpr)) +
geom_line(data=pred_5, aes(x=fpr, y=tpr),colour="green", size=1)+
# brown
geom_point(data=pred_10, aes(x=fpr, y=tpr)) +
geom_line(data=pred_10, aes(x=fpr, y=tpr),colour="brown", size=1)+
# black
geom_point(data=random, aes(x, y)) +
geom_line(data=random, aes(x,y),colour="black", size=1)
set.seed(12)
#Find test probablities with 2, 3, 5, 10 as node size
test_probs_2 <- apply(test[,-5], 1, get_pred, response_variable = 'Species', model = fit_decision_tree("Species", iris, 2))
test_probs_3 <- apply(test[,-5], 1, get_pred, response_variable = 'Species', model = fit_decision_tree("Species", iris, 7))
test_probs_5 <- apply(test[,-5], 1, get_pred, response_variable = 'Species', model = fit_decision_tree("Species", iris, 5))
test_probs_10 <- apply(test[,-5], 1, get_pred, response_variable = 'Species', model = fit_decision_tree("Species", iris, 10))
#Get ROC points from Predictions
pred_2 <- get_roc(test_probs_2, test[,5])
pred_3 <- get_roc(test_probs_3, test[,5])
pred_5 <- get_roc(test_probs_5, test[,5])
pred_10 <- get_roc(test_probs_10, test[,5])
#Plot
ggplot() +
# blue
geom_point(data=pred_2, aes(x=fpr, y=tpr)) +
geom_line(data=pred_2, aes(x=fpr, y=tpr), colour="blue", size=1) +
# red
geom_point(data=pred_3, aes(x=fpr, y=tpr)) +
geom_line(data=pred_3, aes(x=fpr, y=tpr),colour="red", size=1)+
# green
geom_point(data=pred_5, aes(x=fpr, y=tpr)) +
geom_line(data=pred_5, aes(x=fpr, y=tpr),colour="green", size=1)+
# brown
geom_point(data=pred_10, aes(x=fpr, y=tpr)) +
geom_line(data=pred_10, aes(x=fpr, y=tpr),colour="brown", size=1)+
# black
geom_point(data=random, aes(x, y)) +
geom_line(data=random, aes(x,y),colour="black", size=1)
#Find test probablities with 2, 3, 5, 10 as node size
test_probs_2 <- apply(test[,-5], 1, get_pred, response_variable = 'Species', model = fit_decision_tree("Species", iris, 2))
test_probs_5 <- apply(test[,-5], 1, get_pred, response_variable = 'Species', model = fit_decision_tree("Species", iris, 5))
test_probs_10 <- apply(test[,-5], 1, get_pred, response_variable = 'Species', model = fit_decision_tree("Species", iris, 10))
#Get ROC points from Predictions
pred_2 <- get_roc(test_probs_2, test[,5])
pred_5 <- get_roc(test_probs_5, test[,5])
pred_10 <- get_roc(test_probs_10, test[,5])
#Plot
ggplot() +
# blue
geom_point(data=pred_2, aes(x=fpr, y=tpr)) +
geom_line(data=pred_2, aes(x=fpr, y=tpr), colour="blue", size=1) +
# green
geom_point(data=pred_5, aes(x=fpr, y=tpr)) +
geom_line(data=pred_5, aes(x=fpr, y=tpr),colour="green", size=1)+
# brown
geom_point(data=pred_10, aes(x=fpr, y=tpr)) +
geom_line(data=pred_10, aes(x=fpr, y=tpr),colour="brown", size=1)+
# black
geom_point(data=random, aes(x, y)) +
geom_line(data=random, aes(x,y),colour="black", size=1)
ggplot() +
# blue
geom_point(data=pred_2, aes(x=fpr, y=tpr)) +
geom_line(data=pred_2, aes(x=fpr, y=tpr), colour="blue", size=1) +
# green
geom_point(data=pred_5, aes(x=fpr, y=tpr)) +
geom_line(data=pred_5, aes(x=fpr, y=tpr),colour="green", size=1)+
# brown
geom_point(data=pred_10, aes(x=fpr, y=tpr)) +
geom_line(data=pred_10, aes(x=fpr, y=tpr),colour="brown", size=1)+
# black
geom_point(data=random, aes(x, y)) +
geom_line(data=random, aes(x,y),colour="black", size=1)+
ggtitle("ROC Curve")
ggplot() +
# blue
geom_point(data=pred_2, aes(x=fpr, y=tpr)) +
geom_line(data=pred_2, aes(x=fpr, y=tpr), colour="blue", size=1) +
# green
geom_point(data=pred_5, aes(x=fpr, y=tpr)) +
geom_line(data=pred_5, aes(x=fpr, y=tpr),colour="green", size=1)+
# brown
geom_point(data=pred_10, aes(x=fpr, y=tpr)) +
geom_line(data=pred_10, aes(x=fpr, y=tpr),colour="brown", size=1)+
# black
geom_point(data=random, aes(x, y)) +
geom_line(data=random, aes(x,y),colour="black", size=1)+
ggtitle("ROC Curve")+
labs(y="True Postive Rate", x = "False Positive Rate")
ggplot() +
# blue
geom_point(data=pred_2, aes(x=fpr, y=tpr)) +
geom_line(data=pred_2, aes(x=fpr, y=tpr), colour="blue", size=1) +
# green
geom_point(data=pred_5, aes(x=fpr, y=tpr)) +
geom_line(data=pred_5, aes(x=fpr, y=tpr),colour="green", size=1)+
# brown
geom_point(data=pred_10, aes(x=fpr, y=tpr)) +
geom_line(data=pred_10, aes(x=fpr, y=tpr),colour="brown", size=1)+
# black
geom_point(data=random, aes(x, y)) +
geom_line(data=random, aes(x,y),colour="black", size=1)+
ggtitle("ROC Curve", center)+
labs(y="True Postive Rate", x = "False Positive Rate")
ggplot() +
# blue
geom_point(data=pred_2, aes(x=fpr, y=tpr)) +
geom_line(data=pred_2, aes(x=fpr, y=tpr), colour="blue", size=1) +
# green
geom_point(data=pred_5, aes(x=fpr, y=tpr)) +
geom_line(data=pred_5, aes(x=fpr, y=tpr),colour="green", size=1)+
# brown
geom_point(data=pred_10, aes(x=fpr, y=tpr)) +
geom_line(data=pred_10, aes(x=fpr, y=tpr),colour="brown", size=1)+
# black
geom_point(data=random, aes(x, y)) +
geom_line(data=random, aes(x,y),colour="black", size=1)+
ggtitle("ROC Curve", centre)+
labs(y="True Postive Rate", x = "False Positive Rate")
ggplot() +
# blue
geom_point(data=pred_2, aes(x=fpr, y=tpr)) +
geom_line(data=pred_2, aes(x=fpr, y=tpr), colour="blue", size=1) +
# green
geom_point(data=pred_5, aes(x=fpr, y=tpr)) +
geom_line(data=pred_5, aes(x=fpr, y=tpr),colour="green", size=1)+
# brown
geom_point(data=pred_10, aes(x=fpr, y=tpr)) +
geom_line(data=pred_10, aes(x=fpr, y=tpr),colour="brown", size=1)+
# black
geom_point(data=random, aes(x, y)) +
geom_line(data=random, aes(x,y),colour="black", size=1)+
ggtitle("ROC Curve", centre)+
labs(y="True Postive Rate", x = "False Positive Rate")+
theme(plot.title = element_text(hjust = 0.5))
ggplot() +
# blue
geom_point(data=pred_2, aes(x=fpr, y=tpr)) +
geom_line(data=pred_2, aes(x=fpr, y=tpr), colour="blue", size=1) +
# green
geom_point(data=pred_5, aes(x=fpr, y=tpr)) +
geom_line(data=pred_5, aes(x=fpr, y=tpr),colour="green", size=1)+
# brown
geom_point(data=pred_10, aes(x=fpr, y=tpr)) +
geom_line(data=pred_10, aes(x=fpr, y=tpr),colour="brown", size=1)+
# black
geom_point(data=random, aes(x, y)) +
geom_line(data=random, aes(x,y),colour="black", size=1)+
ggtitle("ROC Curve")+
labs(y="True Postive Rate", x = "False Positive Rate")+
theme(plot.title = element_text(hjust = 0.5))
cv.ridge
10^6/2
6/2
10^(6/2)
load("C:/Users/abhij/Desktop/oil.rda")
6*10*log(10,2)+60
log(10,2)
6*10*log(10,2)
6*1*log(1,2)+6
log(1,2)
115/149.96
1- 115/149.96
1020/60
library(randomForest)
library(foreach)
library(doSNOW)
library(ranger)
library(plyr)
library(gbm)
library(caret)
setwd("C:/Users/abhij/Desktop/UVa Coursework/Capstone/IDS-Modelling/Code/R")
all_data <- read.csv('mal_and_benign_traces.csv', header=T) #reading in the data
train_index <- sample(1:nrow(all_data), 2000, replace= FALSE)
X.train <- all_data[train_index,]
Y.train <- all_data[-train_index,]
train_index <- sample(1:nrow(all_data), 3000, replace= FALSE)
X.train <- all_data[train_index,]
Y.train <- all_data[-train_index,]
X.train <- all_data[train_index,-1]
X.train <- all_data[train_index,-c(1:6)]
Y.train <- all_data[-train_index,-c(1:6)]
X.test = all_data[train_index, 1]
Y.test = all_data[-train_index, 1]
summary(Y.test)[2]/(summary(Y.test)[1]+summary(Y.test)[2])*100
summary(Y.test)
X.test = as.factor(all_data[train_index, 1])
Y.test = as.factor(all_data[-train_index, 1])
summary(Y.test)[2]/(summary(Y.test)[1]+summary(Y.test)[2])*100
summary(Y.test)
summary(Y.test)[2]
summary(X.test)[2]/(summary(X.test)[1]+summary(X.test)[2])*100
X.train <- all_data[train_index,-c(1:6)]
Y.train <- as.factor(all_data[train_index, 1])
X.test <-  all_data[-train_index,-c(1:6)]
Y.test <-  as.factor(all_data[-train_index, 1])
rf1 <- randomForest(X.train, Y.train, mtry = 3, ntree = 200)
imp <- importance(rf1, type = 2, class = "1")
imp <- randomForest::importance(rf1, type = 2, class = "1")
imp <- randomForest::importance(rf1, type = 2, class = 1)
imp <- randomForest::importance(rf1, type = 2)
View(imp)
var_imp <- varImpPlot(rf1, sort = TRUE)
rf1 <- randomForest(X.train, Y.train, mtry = 3, ntree = 300)
var_imp <- varImpPlot(rf1, sort = TRUE)
rf1 <- randomForest(X.train, Y.train, mtry = 2, ntree = 300)
var_imp <- varImpPlot(rf1, sort = TRUE)
caret_data <- all_data[train_index,-c(2:6)]
View(caret_data)
View(caret_data)
control <- trainControl(method="repeatedcv", number=10, repeats=3, search="grid")
set.seed(3)
tunegrid <- expand.grid(.mtry=c(1:15))
rf_gridsearch <- train(as.factor(Malacious) ~., data=caret_data, method="rf",
metric=metric, tuneGrid=tunegrid, trControl=control)
rf_gridsearch <- train(as.factor(Malicious) ~., data=caret_data, method="rf",
metric=metric, tuneGrid=tunegrid, trControl=control)
metric <- "Accuracy"
rf_gridsearch <- train(as.factor(Malicious) ~., data=caret_data, method="rf",
metric=metric, tuneGrid=tunegrid, trControl=control)
var_imp <- varImpPlot(rf1, sort = TRUE, main = "Variable Importance")
control <- trainControl(method="repeatedcv", number=10, repeats=3, search="grid")
set.seed(3)
metric <- "Accuracy"
tunegrid <- expand.grid(.mtry=c(2,6,33), .ntree=c(100, 200, 300, 500))
rf_gridsearch <- train(as.factor(Malicious) ~., data=caret_data, method="rf",
metric=metric, tuneGrid=tunegrid, trControl=control)
tunegrid
rf_gridsearch <- train(as.factor(Malicious) ~., data=caret_data, method="rf",
metric=metric, tuneGrid=tunegrid, trControl=control)
tunegrid <- expand.grid(mtry=c(2,6,33), ntree=c(100, 200, 300, 500))
rf_gridsearch <- train(as.factor(Malicious) ~., data=caret_data, method="rf",
metric=metric, tuneGrid=tunegrid, trControl=control)
tunegrid <- expand.grid(.mtry=c(2,6,33), .ntree=c(100, 200, 300, 500))
tunegrid
tunegrid <- expand.grid(mtry=c(2,6,33), .ntree=c(100, 200, 300, 500))
rf_gridsearch <- train(as.factor(Malicious) ~., data=caret_data, method="rf",
metric=metric, tuneGrid = tunegrid, trControl=control)
customRF <- list(type = "Classification", library = "randomForest", loop = NULL)
customRF$parameters <- data.frame(parameter = c("mtry", "ntree"), class = rep("numeric", 2), label = c("mtry", "ntree"))
customRF$grid <- function(x, y, len = NULL, search = "grid") {}
customRF$fit <- function(x, y, wts, param, lev, last, weights, classProbs, ...) {
randomForest(x, y, mtry = param$mtry, ntree=param$ntree, ...)
}
customRF$predict <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata)
customRF$prob <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata, type = "prob")
customRF$sort <- function(x) x[order(x[,1]),]
customRF$levels <- function(x) x$classes
tunegrid <- expand.grid(mtry=c(2,6,33), .ntree=c(100, 200, 300, 500))
rf_gridsearch <- train(as.factor(Malicious) ~., data=caret_data, method= customRF,
metric=metric, tuneGrid = tunegrid, trControl=control)
tunegrid <- expand.grid(.mtry=c(1:15), .ntree=c(1000, 1500, 2000, 2500))
rf_gridsearch <- train(as.factor(Malicious) ~., data=caret_data, method= customRF,
metric=metric, tuneGrid = tunegrid, trControl=control)
tunegrid <- expand.grid(.mtry=c(2, 6, 33), .ntree=c(100, 200, 300, 500))
rf_gridsearch <- train(as.factor(Malicious) ~., data=caret_data, method= customRF,
metric=metric, tuneGrid = tunegrid, trControl=control)
control <- trainControl(method="repeatedcv", number=10, repeats=3, search="grid", allowParallel = TRUE)
rf_gridsearch <- train(as.factor(Malicious) ~., data=caret_data, method= customRF,
metric=metric, tuneGrid = tunegrid, trControl=control)
library(parallel)
library(doParallel)
detectCores()
cluster <- makeCluster(detectCores()) # convention to leave 1 core for OS
registerDoParallel(cluster)
#Caret implementation of customRF
control <- trainControl(method="repeatedcv", number=10, repeats=3, search="grid", allowParallel = TRUE)
set.seed(3)
metric <- "Accuracy"
tunegrid <- expand.grid(.mtry=c(2, 6, 33), .ntree=c(100, 200, 300, 500))
rf_gridsearch <- train(as.factor(Malicious) ~., data=caret_data, method= customRF,
metric=metric, tuneGrid = tunegrid, trControl=control)
print(rf_gridsearch)
plot(rf_gridsearch)
crf <- randomForest(caret_data[,-1], caret_data[,1], mtry = 6, ntree = 200)
caret_test[,-1]
caret_test <- all_data[-train_index,-c(2:6)]
caret_test[,-1]
test_pred_crf <- predict(crf, newdata = caret_test[,-1])
confusionMatrix(test_pred_crf, caret_test[,1])
confusionMatrix(test_pred_crf, as.factor(caret_test[,1]))
as.factor(caret_test[,1])
summary(as.factor(caret_test[,1]))
caret_data[,1]
crf <- randomForest(caret_data[,-1], caret_data[,1], mtry = 6, ntree = 200)
crf <- randomForest(caret_data[,-1], as.factor(caret_data[,1]), mtry = 6, ntree = 200)
test_pred_crf <- predict(crf, newdata = caret_test[,-1])
confusionMatrix(test_pred_crf, as.factor(caret_test[,1]))
plot(all_data[,"mean_intvl"], all_data[,"Malicious"])
plot(all_data[,"Malicious"],all_data[,"mean_intvl"],)
plot(all_data[,"mean_intvl"], all_data[,"Malicious"])
plot(all_data[all_data[,"mean_intvl"]<1e+05,"mean_intvl"], all_data[all_data[,"mean_intvl"]<1e+05,"Malicious"])
plot(all_data[all_data[,"mean_intvl"]<40000,"mean_intvl"], all_data[all_data[,"mean_intvl"]<40000,"Malicious"])
hist(all_data[all_data[,"mean_intvl"]<40000,"mean_intvl"])
hist(all_data[all_data[,"mean_intvl"],"Malicious"])
hist(all_data[all_data[,"mean_intvl"]<40000 & all_data[,"Malicious"]==0,"mean_intvl"])
hist(all_data[all_data[,"mean_intvl"]<40000 & all_data[,"Malicious"]==1,"mean_intvl"])
boxplot(all_data[all_data[,"mean_intvl"],"mean_intvl"]~all_data[all_data[,"mean_intvl"],"Malicious"],
notch=TRUE,
col=(c("gold","darkgreen")),
main="Tooth Growth", xlab="Suppliment and Dose")
boxplot(all_data[all_data[,"mean_intvl"],"mean_intvl"]~all_data[all_data[,"mean_intvl"],"Malicious"],
notch=FALSE,
col=(c("gold","darkgreen")),
main="Tooth Growth", xlab="Suppliment and Dose")
boxplot(all_data[all_data[,"mean_intvl"]<40000,"mean_intvl"]~all_data[all_data[,"mean_intvl"]<40000,"Malicious"],
notch=FALSE,
col=(c("gold","darkgreen")),
main="Tooth Growth", xlab="Suppliment and Dose")
boxplot(all_data[all_data[,"mean_intvl"]<25000,"mean_intvl"]~all_data[all_data[,"mean_intvl"]<25000,"Malicious"],
notch=FALSE,
col=(c("gold","darkgreen")),
main="Tooth Growth", xlab="Suppliment and Dose")
boxplot(all_data[all_data[,"mean_intvl"]<25000,"mean_intvl"]~all_data[all_data[,"mean_intvl"]<25000,"Malicious"],
notch=FALSE,
col=(c("gold","darkgreen")),
main="Mean Interval distribution", xlab = "Non Malicious/Malacious", ylab = "Mean Interval")
boxplot(all_data[all_data[,"mean_intvl"]<5000,"mean_intvl"]~all_data[all_data[,"mean_intvl"]<5000,"Malicious"],
notch=FALSE,
col=(c("gold","darkgreen")),
main="Mean Interval distribution", xlab = "Non Malicious/Malacious", ylab = "Mean Interval")
boxplot(all_data[all_data[,"mean_intvl"]<40000,"mean_intvl"]~all_data[all_data[,"mean_intvl"]<40000,"Malicious"],
notch=FALSE,
col=(c("gold","darkgreen")),
main="Mean Interval distribution", xlab = "Non Malicious/Malacious", ylab = "Mean Interval")
boxplot(all_data[,"mean_src_pkts"]~all_data[,"Malicious"],
notch=FALSE,
col=(c("gold","darkgreen")),
main="Mean Interval distribution", xlab = "Non Malicious/Malacious", ylab = "Mean Interval")
boxplot(all_data[all_data[,"mean_src_pkts"]<100,"mean_intvl"]~all_data[all_data[,"mean_src_pkts"]<100,"Malicious"],
notch=FALSE,
col=(c("gold","darkgreen")),
main="Mean Interval distribution", xlab = "Non Malicious/Malacious", ylab = "Mean Interval")
boxplot(all_data[all_data[,"mean_src_pkts"]<100,"mean_src_pkts"]~all_data[all_data[,"mean_src_pkts"]<100,"Malicious"],
notch=FALSE,
col=(c("gold","darkgreen")),
main="Mean Interval distribution", xlab = "Non Malicious/Malacious", ylab = "Mean Interval")
boxplot(all_data[all_data[,"mean_src_pkts"]<100,"mean_src_pkts"]~all_data[all_data[,"mean_src_pkts"]<100,"Malicious"],
notch=FALSE,
col=(c("gold","darkgreen")),
main="Mean Source Packets Distribution", xlab = "Non Malicious/Malacious", ylab = "Mean Source Packets")
boxplot(all_data[all_data[,"mean_src_pkts"]<100,"mean_src_pkts"]~all_data[all_data[,"mean_src_pkts"]<100,"Malicious"],
notch=FALSE,
col=(c("darkgreen","red")),
main="Mean Source Packets Distribution", xlab = "Non Malicious/Malacious", ylab = "Mean Source Packets")
boxplot(all_data[all_data[,"mean_intvl"]<40000,"mean_intvl"]~all_data[all_data[,"mean_intvl"]<40000,"Malicious"],
notch=FALSE,
col=(c("darkgreen","red")),
main="Mean Interval distribution", xlab = "Non Malicious/Malacious", ylab = "Mean Interval")
boxplot(all_data[all_data[,"mean_duration"],"mean_duration"]~all_data[all_data[,"mean_duration"],"Malicious"],
notch=FALSE,
col=(c("darkgreen","red")),
main="Mean Source Packets Distribution", xlab = "Non Malicious/Malacious", ylab = "Mean Source Packets")
boxplot(all_data[all_data[,"mean_duration"],"mean_duration"]~all_data[all_data[,"mean_duration"],"Malicious"],
notch=FALSE,
col=(c("darkgreen","red")),
main="Mean Duration Distribution", xlab = "Non Malicious/Malacious", ylab = "Mean Duration")
confusionMatrix(test_pred_crf, as.factor(caret_test[,1]))
install.packages(pROC)
install.packages("pROC")
library(pROC)
roc(as.factor(caret_test[,1])~test_pred_crf, percent = TRUE, smooth = TRUE, plot = TRUE)
roc(caret_test[,1]~test_pred_crf, percent = TRUE, smooth = TRUE, plot = TRUE)
test_pred_crf
roc(caret_test[,1]~as.numeric(test_pred_crf), percent = TRUE, smooth = TRUE, plot = TRUE)
roc(caret_test[,1]~as.numeric(test_pred_crf), percent = TRUE, smooth = F, plot = TRUE)
confusionMatrix(test_pred_crf, as.factor(caret_test[,1]))
svm_Radial <- train(as.factor(Malicious) ~., data = caret_data, method = "svmRadial",
trControl=control,
preProcess = c("center", "scale"),
tuneLength = 10)
svm_Radial <- train(as.factor(Malicious) ~., data = caret_data, method = "svmRadial",
trControl=control,
preProcess = c("center"),
tuneGrid = grid_radial,
tuneLength = 10)
grid_radial <- expand.grid(sigma = c(0,0.01, 0.02, 0.025, 0.03, 0.04,
0.05, 0.06, 0.07,0.08, 0.09, 0.1, 0.25, 0.5, 0.75,0.9),
C = c(0,0.01, 0.05, 0.1, 0.25, 0.5, 0.75,
1, 1.5, 2,5))
svm_Radial <- train(as.factor(Malicious) ~., data = caret_data, method = "svmRadial",
trControl=control,
preProcess = c("center"),
tuneGrid = grid_radial,
tuneLength = 10)
grid_radial <- expand.grid(sigma = c(0,0.01 0.1,1), C = c(0.01, 0.1,1, 2,5))
grid_radial <- expand.grid(sigma = c(0,0.01, 0.1,1), C = c(0.01, 0.1,1, 2,5))
svm_Radial <- train(as.factor(Malicious) ~., data = caret_data, method = "svmRadial",
trControl=control,
preProcess = c("center"),
tuneGrid = grid_radial,
tuneLength = 10)
warnings()
plot(svm_Radial)
plot(svm_Radial, ylim=c(0, 1))
print(svm_Radial)
svm_Radial
test_pred_svmr <- predict(svm_Radial, newdata = caret_test[,-1])
confusionMatrix(test_pred_svmr, as.factor(caret_test[,1]))
roc(caret_test[,1]~as.numeric(test_pred_svmr), percent = TRUE, smooth = F, plot = TRUE)
plot(roc(caret_test[,1]~as.numeric(test_pred_crf), percent = TRUE, smooth = F))
plot(roc(caret_test[,1]~as.numeric(test_pred_svmr), percent = TRUE, smooth = F, add =T, col = "red"))
plot(roc(caret_test[,1]~as.numeric(test_pred_crf), percent = TRUE, smooth = F, legacy.axes = T))
plot(roc(caret_test[,1]~as.numeric(test_pred_crf), percent = TRUE, smooth = F, legacy.axes = T, asp = NA))
library(ROCR)
install.packages("ROCR")
library(ROCR)
perf <- performance(test_pred_svmr,"tpr","fpr")
perf <- performance(test_pred_crf,"tpr","fpr")
svmr_pred <- prediction(test_pred_svmr,caret_test[,1] )
svmr_pred <- prediction(test_pred_svmr,caret_test[,1] )
svmr_pred <- prediction(test_pred_svmr,as.factor(caret_test[,1]) )
svmr_pred <- prediction(as.numeric(test_pred_svmr),caret_test[,1] )
perf <- performance(svmr_pred,"tpr","fpr")
plot(perf)
confusionMatrix(test_pred_svmr, as.factor(caret_test[,1]))
TPR = 1068/1275
1068/1275
confusionMatrix(test_pred_crf, as.factor(caret_test[,1]))
1058/(1058+207)
207/(1058+207)
confusionMatrix(test_pred_svmr, as.factor(caret_test[,1]))
boxplot(all_data[all_data[,"mean_duration"],"mean_duration"]~all_data[all_data[,"mean_duration"],"Malicious"],
notch=FALSE,
col=(c("darkgreen","red")),
main="Mean Duration Distribution", xlab = "Non Malicious/Malacious", ylab = "Mean Duration")
boxplot(all_data[all_data[,"mean_src_pkts"]<100,"mean_src_pkts"]~all_data[all_data[,"mean_src_pkts"]<100,"Malicious"],
notch=FALSE,
col=(c("darkgreen","red")),
main="Mean Source Packets Distribution", xlab = "Non Malicious/Malacious", ylab = "Mean Source Packets")
boxplot(all_data[all_data[,"mean_duration"],"mean_duration"]~all_data[all_data[,"mean_duration"],"Malicious"],
notch=FALSE,
col=(c("darkgreen","red")),
main="Mean Duration Distribution", xlab = "Non Malicious/Malacious", ylab = "Mean Duration")
setwd("C:/Users/abhij/Desktop/UVa Coursework/Capstone/IDS-Modelling/Code/R")
webtrace <- read.csv("mal_and_benign_traces.csv")
library(randomForest)
set.seed(1)
6/1062
6/1062*100
boxplot(all_data[all_data[,"mean_duration"],"mean_duration"]~all_data[all_data[,"mean_duration"],"Malicious"],
notch=FALSE,
col=(c("darkgreen","red")),
main="Mean Duration Distribution", xlab = "Non Malicious/Malacious", ylab = "Mean Duration")
all_data[all_data[,"mean_duration"],"Malicious"]
all_data[all_data[,"mean_duration"],"mean_duration"]
0.83636/1.83636
(0.9944*0.9906)/(0.9944+0.9906)
